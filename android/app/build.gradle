apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 */
 project.ext.react = [
   // the name of the generated asset file containing your JS bundle
   bundleAssetName: "index.android.bundle",

   // the entry file for bundle generation
   entryFile: "index.js",

   // whether to bundle JS and assets in debug mode
   bundleInDebug: false,

   // whether to bundle JS and assets in release mode
   bundleInRelease: true,

   // whether to bundle JS and assets in another build variant (if configured).
   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
   // The configuration property can be in the following formats
   //         'bundleIn${productFlavor}${buildType}'
   //         'bundleIn${buildType}'
   // bundleInFreeDebug: true,
   // bundleInPaidRelease: true,
   // bundleInBeta: true,

   // whether to disable dev mode in custom build variants (by default only disabled in release)
   // for example: to disable dev mode in the staging build type (if configured)
   devDisabledInStaging: true,
   // The configuration property can be in the following formats
   //         'devDisabledIn${productFlavor}${buildType}'
   //         'devDisabledIn${buildType}'

    // the root of your project, i.e. where "package.json" lives
   root: "../../",

   // where to put the JS bundle asset in debug mode
   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",

   // where to put the JS bundle asset in release mode
   jsBundleDirRelease: "$buildDir/intermediates/assets/release",

   // where to put drawable resources / React Native assets, e.g. the ones you use via
   // require('./image.png')), in debug mode
   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",

   // where to put drawable resources / React Native assets, e.g. the ones you use via
   // require('./image.png')), in release mode
   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",

   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
   // date; if you have any other folders that you want to ignore for performance reasons (gradle
   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
   // for example, you might want to remove it from here.
   inputExcludes: ["android/**", "ios/**"],

   // override which node gets called and with what additional arguments
   nodeExecutableAndArgs: ["node"],

   // supply additional arguments to the packager
   extraPackagerArgs: []
 ]

apply from: "../../node_modules/react-native/react.gradle"

/* PhotoEditor SDK */

// Apply the PESDKPlugin
apply plugin: 'ly.img.android.pesdk'

// Configure the PESDKPlugin
pesdkConfig {

    licencePath "LICENSE" // Name of the Licence file in the asset folder

    // Insert the latest SDK version here. You will find it here https://github.com/imgly/pesdk-android-demo/releases
    pesdkVersion "6.0.7"

    // If you use another supportLibVersion ('com.android.support'), change this version here to update your own supportLibVersion
    supportLibVersion "27.1.1"

    // Define the modules you are need
    modules {
        // Add all the backend modules you need
        include 'ly.img.android.pesdk.operation:text'
        include 'ly.img.android.pesdk.operation:frame'
        include 'ly.img.android.pesdk.operation:focus'
        include 'ly.img.android.pesdk.operation:brush'
        include 'ly.img.android.pesdk.operation:camera'
        include 'ly.img.android.pesdk.operation:filter'
        include 'ly.img.android.pesdk.operation:sticker'
        include 'ly.img.android.pesdk.operation:overlay'
        include 'ly.img.android.pesdk.operation:adjustment'
        include 'ly.img.android.pesdk.operation:text-design'
        include 'ly.img.android.pesdk.operation:abstract-sticker'

        // Add all the UI modules you are need
        include 'ly.img.android.pesdk.ui.mobile_ui:core'
        include 'ly.img.android.pesdk.ui.mobile_ui:text'
        include 'ly.img.android.pesdk.ui.mobile_ui:focus'
        include 'ly.img.android.pesdk.ui.mobile_ui:frame'
        include 'ly.img.android.pesdk.ui.mobile_ui:brush'
        include 'ly.img.android.pesdk.ui.mobile_ui:filter'
        include 'ly.img.android.pesdk.ui.mobile_ui:camera'
        include 'ly.img.android.pesdk.ui.mobile_ui:sticker'
        include 'ly.img.android.pesdk.ui.mobile_ui:overlay'
        include 'ly.img.android.pesdk.ui.mobile_ui:transform'
        include 'ly.img.android.pesdk.ui.mobile_ui:adjustment'
        include 'ly.img.android.pesdk.ui.mobile_ui:text-design'


        // Add the serializer if you need
        include 'ly.img.android.pesdk:serializer'

        // Add asset packs if you need
        include 'ly.img.android.pesdk.assets:font-basic'
        include 'ly.img.android.pesdk.assets:font-text-design'
        include 'ly.img.android.pesdk.assets:frame-basic'
        include 'ly.img.android.pesdk.assets:filter-basic'
        include 'ly.img.android.pesdk.assets:overlay-basic'
        include 'ly.img.android.pesdk.assets:sticker-shapes'
        include 'ly.img.android.pesdk.assets:sticker-emoticons'
    }
}

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "com.photoeditorsdk.react_native.demo"
        minSdkVersion 16
        multiDexEnabled true
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }

    }

    /* Set Java Language level to Java 1.8+ */
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    compile project(':react-native-fs')
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:27.1.1'
    compile 'com.facebook.react:react-native:+'
    implementation 'com.android.support:multidex:1.0.3'
    // From node_modules
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
